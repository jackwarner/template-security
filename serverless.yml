# TODO: Update Serverless service name
# NOTE: Service name must match the repository name, but with all '.' replaced with '-' (this is a restriction of Cloudformation naming conventions)
service: my-new-service

# DO NOT MODIFY!!!
custom:
  source:
    ServiceName: ${opt:serviceName}

# DO NOT MODIFY!!!
provider:
  name: aws
  runtime: nodejs4.3

resources:  
  Resources:
  # DO NOT MODIFY!!!
    AppKey:
      Type: AWS::KMS::Key
      DependsOn: Role
      Properties:
        Description: 'Key used to encrypt secrets for this stage'
        Enabled: true
        EnableKeyRotation: true
        KeyPolicy:
          Version: '2012-10-17'
          Statement:
          - Sid: Allow administration of the key by GS-FullAdmin
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ''
                  - - 'arn:aws:iam::'
                    - Ref: AWS::AccountId
                    - ':role/GS-FullAdmin'
            Action:
              - kms:*
            Resource: '*'
          - Sid: Allow admin by CodeBuild service role defined in gs.aws.pipelines security directory
            Effect: Allow
            Principal:
              AWS:
                Fn::ImportValue: codebuild-arn-${self:service}
            Action:
              - kms:*
            Resource: '*'
          - Sid: ${opt:serviceName} ${opt:stage} Allow Key usage to Lambda Execution Role
            Effect: Allow
            Principal:
              AWS:
                Fn::GetAtt: [ Role, Arn ]
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'

    # DO NOT MODIFY!!!
    SecretsBucket:
      Type: AWS::S3::Bucket
      Properties:
        VersioningConfiguration:
          Status: Enabled
        LoggingConfiguration:
          DestinationBucketName:
            Fn::ImportValue:
              AppSecretLoggingBucket
          LogFilePrefix: logs-${self:service}-${opt:stage}

    # DO NOT MODIFY!!!
    SecretsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      DependsOn: Role
      Properties:
        Bucket:
          Ref: SecretsBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: Allow admins to upload encrypted secrets using stack key
            Action:
            - s3:PutObject
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ''
                  - - 'arn:aws:iam::'
                    - Ref: AWS::AccountId
                    - ':role/GS-FullAdmin'
            Resource:
              Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: SecretsBucket
                  - '/*'
            Condition:
              StringEquals:
                s3:x-amz-server-side-encryption: aws:kms
                s3:x-amz-server-side-encryption-aws-kms-key-id:
                  Fn::GetAtt: [ AppKey, Arn ]
              Bool:
                aws:SecureTransport: true
          - Sid: Do not allow other keys to be used in this bucket
            Effect: Deny
            Principal: '*'
            Action:
              - s3:PutObject
            Resource:
              Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: SecretsBucket
                  - '/*'
            Condition:
              StringNotEquals:
                s3:x-amz-server-side-encryption-aws-kms-key-id:
                  Fn::GetAtt: [ AppKey, Arn ]
          - Sid: Allow Lambda execution role to download and decrypt secrets
            Effect: Allow
            Action:
            - s3:GetObject
            Principal:
              AWS:
                Fn::GetAtt: [ Role, Arn ]
            Resource:
              Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: SecretsBucket
                  - '/*'
            Condition:
               Bool:
                 aws:SecureTransport: true

    Role:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: "/"
        Policies:
          - PolicyName: ${self:custom.source.ServiceName}.security.${opt:stage}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                # DO NOT MODIFY!!! this set of permissions is needed for the Lambda Functions to log to Cloudwatch Logs
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    Fn::Join:
                      - ''
                      - - 'arn:aws:logs:'
                        - Ref: AWS::Region
                        - ':*:*'
                # TODO: Add the IAM Permissions for your Lambda Functions here
                # NOTE: Only add the minimum permissions necessary
                # EXAMPLE: This example gives the Lambda Functions access to a DynamoDB table
                # - Effect: Allow
                #   Action:
                #     - dynamodb:GetItem
                #     - dynamodb:PutItem
                #     - dynamodb:UpdateItem
                #     - dynamodb:DeleteItem
                #   Resource:
                #     Fn::Join:
                #     - ''
                #     - - 'arn:aws:dynamodb:'
                #       - Ref: AWS::Region
                #       - ":"
                #       - Ref: AWS::AccountId
                #       - ":table/"
                #       - ${self:custom.source.ServiceName}
                #       - "."
                #       - ${opt:stage}

  # DO NOT MODIFY!!!
  Outputs:
    SecretsBucket:
      Description: Bucket to store secrets for ${self:service}-${opt:stage}
      Value:
        Ref: SecretsBucket
    KmsKeyId:
      Description: Stage ${opt:stage} KMS Key Id
      Value:
        Ref: AppKey
    RoleARN:
      Description: Stage ${opt:stage} IAM Role ARN
      Value:
        Fn::GetAtt:
          - Role
          - Arn
      Export:
        Name: ${self:service}-${opt:stage}

